<% if notice %>
<div class="message success"><p><%= notice %></p></div>
<% end %>

<div class="block">
	<div class="block_head">
		<div class="bheadl"></div>
		<div class="bheadr"></div>
		
		<h2>Organizations</h2>
		
		<ul class="tabs">
			<li><a href="#graph_tab">As Graph</a></li>
			<li><a href="#table_tab">As Table</a></li>
		</ul>
	</div> <!-- .block_head -->

	<div class="block_content tab_content" id="graph_tab">
    <style type="text/css">
		  #infovis {
          position: relative;
          width: 930px;
          height: 600px;
          margin: auto;
          overflow: hidden;
      }
      
      .jit-autoadjust-label {
        padding: 15px;
      }
		</style>
		
		<div id="infovis"></div>
		
  </div>
	
	<div class="block_content tab_content" id="table_tab">
		
		<p>Showing <b>only</b> top level organizations. Click an organization to see its children.</p>
		
		<table>
		  <tr>
		    <th>Name</th>
		    <th>Manager</th>
		  </tr>
		<% @ous.each do |ou| %>
		  <tr>
		    <td><%= link_to ou.name, ou %></td>
			<td>
			<% ou.managers.each do |manager| %>
				<%= link_to manager.name, manager %><%= raw("&nbsp;" * 4) %>
			<% end %>
			</td>
		  </tr>
		<% end %>
		</table>		
	</div> <!-- .block_content -->
	
	<div class="bendl"></div>
	<div class="bendr"></div>
</div> <!-- .block -->

<script type="text/javascript">
  json = {};

  var labelType, useGradients, nativeTextSupport, animate;

  (function() {
    var ua = navigator.userAgent,
        iStuff = ua.match(/iPhone/i) || ua.match(/iPad/i),
        typeOfCanvas = typeof HTMLCanvasElement,
        nativeCanvasSupport = (typeOfCanvas == 'object' || typeOfCanvas == 'function'),
        textSupport = nativeCanvasSupport 
          && (typeof document.createElement('canvas').getContext('2d').fillText == 'function');
    //I'm setting this based on the fact that ExCanvas provides text support for IE
    //and that as of today iPhone/iPad current text support is lame
    labelType = (!nativeCanvasSupport || (textSupport && !iStuff))? 'Native' : 'HTML';
    nativeTextSupport = labelType == 'Native';
    useGradients = nativeCanvasSupport;
    animate = !(iStuff || !nativeCanvasSupport);
  })();

  function init(){
      // Create a new ST instance
      st = new $jit.ST({
          //id of viz container element
          injectInto: 'infovis',
          //set duration for the animation
          duration: 350,
          orientation: "top",
          //set animation transition type
          transition: $jit.Trans.Quart.easeInOut,
          //set distance between node and its children
          levelDistance: 60,
          //enable panning
          Navigation: {
            enable: true,
            panning: true
          },

          Node: {
              overridable: true,
              type: 'ellipse',  
              color: '#95c0f6',
              alpha: 1,
              dim: 3,
              height: 90,  
              width: 90,
              autoHeight: false,
              autoWidth: false,
              lineWidth: 1,
              transform: true,  
              align: "center",
              angularWidth: 1,
              span: 1,
              CanvasStyles: {}
          },
        
          Edge: {
              type: 'bezier',
              overridable: true
          },
        
          //This method is called on DOM label creation.
          //Use this method to add event handlers and styles to
          //your node.
          onCreateLabel: function(label, node){
              label.id = node.id;            
              label.innerHTML = node.name;
              label.onclick = function(){
                st.onClick(node.id);
              };
              //set label styles
              var style = label.style;
              style.width = 90 + 'px';
              style.height = 70 + 'px';
              style.cursor = 'pointer';
              style.color = '#333';
              style.fontSize = '0.75em';
              style.textAlign= 'center';
              style.paddingTop = '35px';
          },
        
          //This method is called right before plotting
          //a node. It's useful for changing an individual node
          //style properties before plotting it.
          //The data properties prefixed with a dollar
          //sign will override the global node style properties.
          onBeforePlotNode: function(node){
              //add some color to the nodes in the path between the
              //root node and the selected node.
              if (node.selected) {
                  node.data.$color = "#d6a4e8";
              }
              else {
                  delete node.data.$color;
                  //if the node belongs to the last plotted level
                  if(!node.anySubnode("exist")) {
                      //count children number
                      var count = 0;
                      node.eachSubnode(function(n) { count++; });
                      //assign a node color based on
                      //how many children it has
                      node.data.$color = ['#95c0f6', '#6b90c9', '#4b68a2', '#32457c', '#232e63', '#191e4f'][count];
                  }
              }
          },
        
          //This method is called right before plotting
          //an edge. It's useful for changing an individual edge
          //style properties before plotting it.
          //Edge data proprties prefixed with a dollar sign will
          //override the Edge global style properties.
          onBeforePlotLine: function(adj){
              if (adj.nodeFrom.selected && adj.nodeTo.selected) {
                  adj.data.$color = "#eed";
                  adj.data.$lineWidth = 3;
              }
              else {
                  delete adj.data.$color;
                  delete adj.data.$lineWidth;
              }
          }
      });
    
      //load json data
      st.loadJSON(json);
      //compute node positions and layout
      st.compute();
      //optional: make a translation of the tree
      //st.geom.translate(new $jit.Complex(-200, 0), "current");
      //emulate a click on the root node.
      st.onClick(st.root);
  }

  $.getJSON('/api/org_chart.json', function(data) {
    json = data;
    
    init();
    
    $("div#infovis").width($("div.block").width() - 15);
    st.canvas.resize($("div.block").width() - 15, 600);
  });
  
  // resize canvas to match block
  $(window).resize(function() {
    $("div#infovis").width($("div.block").width() - 15);
    st.canvas.resize($("div.block").width() - 15, 600);
  });
</script>
