<% if notice %>
<div class="message success"><p><%= notice %></p></div>
<% end %>

<div class="block">
	<div class="block_head">
		<div class="bheadl"></div>
		<div class="bheadr"></div>
		
		<h2>Organizations</h2>
	</div> <!-- .block_head -->
	
	<div class="block_content">
		
		<p>Showing <b>only</b> top level organizations. Click an organization to see its children.</p>
		
		<table>
		  <tr>
		    <th>Name</th>
		    <th>Manager</th>
		  </tr>
		<% @ous.each do |ou| %>
		  <tr>
		    <td><%= link_to ou.name, ou %></td>
			<td>
			<% ou.managers.each do |manager| %>
				<%= link_to manager.name, manager %><%= raw("&nbsp;" * 4) %>
			<% end %>
			</td>
		  </tr>
		<% end %>
		</table>

		<br />

		<%= link_to 'New Organization', new_ou_path %>
		
		<style type="text/css">
		  #infovis {
          position:relative;
          width:600px;
          height:600px;
          margin:auto;
          overflow:hidden;
      }
      
      .jit-autoadjust-label {
        padding: 15px;
      }
		</style>
		
		<div id="infovis"></div>
		
		<div id="log"></div>
		
		<h4>Tree Orientation</h4>
    <table>
        <tr>
            <td>
                <label for="r-left">Left </label>
            </td>
            <td>
                <input type="radio" id="r-left" name="orientation" checked="checked" value="left" />
            </td>
        </tr>
        <tr>
             <td>
                <label for="r-top">Top </label>
             </td>
             <td>
                <input type="radio" id="r-top" name="orientation" value="top" />
             </td>
        </tr>
        <tr>
             <td>
                <label for="r-bottom">Bottom </label>
              </td>
              <td>
                <input type="radio" id="r-bottom" name="orientation" value="bottom" />
              </td>
        </tr>
        <tr>
              <td>
                <label for="r-right">Right </label>
              </td> 
              <td> 
               <input type="radio" id="r-right" name="orientation" value="right" />
              </td>
        </tr>
    </table>
    
    <h4>Selection Mode</h4>
    <table>
        <tr>
            <td>
                <label for="s-normal">Normal </label>
            </td>
            <td>
                <input type="radio" id="s-normal" name="selection" checked="checked" value="normal" />
            </td>
        </tr>
        <tr>
             <td>
                <label for="s-root">Set as Root </label>
             </td>
             <td>
                <input type="radio" id="s-root" name="selection" value="root" />
             </td>
        </tr>
    </table>
		
	</div> <!-- .block_content -->
	
	<div class="bendl"></div>
	<div class="bendr"></div>
</div> <!-- .block -->

<script type="text/javascript">
  json = {};

  var labelType, useGradients, nativeTextSupport, animate;

  (function() {
    var ua = navigator.userAgent,
        iStuff = ua.match(/iPhone/i) || ua.match(/iPad/i),
        typeOfCanvas = typeof HTMLCanvasElement,
        nativeCanvasSupport = (typeOfCanvas == 'object' || typeOfCanvas == 'function'),
        textSupport = nativeCanvasSupport 
          && (typeof document.createElement('canvas').getContext('2d').fillText == 'function');
    //I'm setting this based on the fact that ExCanvas provides text support for IE
    //and that as of today iPhone/iPad current text support is lame
    labelType = (!nativeCanvasSupport || (textSupport && !iStuff))? 'Native' : 'HTML';
    nativeTextSupport = labelType == 'Native';
    useGradients = nativeCanvasSupport;
    animate = !(iStuff || !nativeCanvasSupport);
  })();

  var Log = {
    elem: false,
    write: function(text){
      if (!this.elem) 
        this.elem = document.getElementById('log');
      this.elem.innerHTML = text;
      this.elem.style.left = (500 - this.elem.offsetWidth / 2) + 'px';
    }
  };


  function init(){
      //init Spacetree
      //Create a new ST instance
      var st = new $jit.ST({
          //id of viz container element
          injectInto: 'infovis',
          //set duration for the animation
          duration: 400,
          //set animation transition type
          transition: $jit.Trans.Quart.easeInOut,
          //set distance between node and its children
          levelDistance: 60,
          //enable panning
          Navigation: {
            enable: true,
            panning: true
          },
          //set node and edge styles
          //set overridable=true for styling individual
          //nodes or edges
          Node: {
              height: 70,
              autoHeight: true,
              type: 'rectangle',
              color: '#ccb',
              overridable: true,
              alpha: 1
          },
        
          Edge: {
              type: 'bezier',
              overridable: true
          },
        
          onBeforeCompute: function(node){
              Log.write("loading " + node.name);
          },
        
          onAfterCompute: function(){
              Log.write("done");
          },
        
          //This method is called on DOM label creation.
          //Use this method to add event handlers and styles to
          //your node.
          onCreateLabel: function(label, node){
              label.id = node.id;            
              label.innerHTML = node.name;
              label.onclick = function(){
              	if(normal.checked) {
              	  st.onClick(node.id);
              	} else {
                  st.setRoot(node.id, 'animate');
              	}
              };
              //set label styles
              var style = label.style;
              style.width = 80 + 'px';
              style.height = 27 + 'px';            
              style.cursor = 'pointer';
              style.color = '#333';
              style.fontSize = '0.8em';
              style.textAlign= 'center';
              style.paddingTop = '4px';
          },
        
          //This method is called right before plotting
          //a node. It's useful for changing an individual node
          //style properties before plotting it.
          //The data properties prefixed with a dollar
          //sign will override the global node style properties.
          onBeforePlotNode: function(node){
              //add some color to the nodes in the path between the
              //root node and the selected node.
              if (node.selected) {
                  node.data.$color = "#ff7";
              }
              else {
                  delete node.data.$color;
                  //if the node belongs to the last plotted level
                  if(!node.anySubnode("exist")) {
                      //count children number
                      var count = 0;
                      node.eachSubnode(function(n) { count++; });
                      //assign a node color based on
                      //how many children it has
                      node.data.$color = ['#aaa', '#baa', '#caa', '#daa', '#eaa', '#faa'][count];                    
                  }
              }
          },
        
          //This method is called right before plotting
          //an edge. It's useful for changing an individual edge
          //style properties before plotting it.
          //Edge data proprties prefixed with a dollar sign will
          //override the Edge global style properties.
          onBeforePlotLine: function(adj){
              if (adj.nodeFrom.selected && adj.nodeTo.selected) {
                  adj.data.$color = "#eed";
                  adj.data.$lineWidth = 3;
              }
              else {
                  delete adj.data.$color;
                  delete adj.data.$lineWidth;
              }
          }
      });
    
      //load json data
      st.loadJSON(json);
      //compute node positions and layout
      st.compute();
      //optional: make a translation of the tree
      st.geom.translate(new $jit.Complex(-200, 0), "current");
      //emulate a click on the root node.
      st.onClick(st.root);
      //end
      //Add event handlers to switch spacetree orientation.
      var top = $jit.id('r-top'), 
          left = $jit.id('r-left'), 
          bottom = $jit.id('r-bottom'), 
          right = $jit.id('r-right'),
          normal = $jit.id('s-normal');
        
    
      function changeHandler() {
          if(this.checked) {
              top.disabled = bottom.disabled = right.disabled = left.disabled = true;
              st.switchPosition(this.value, "animate", {
                  onComplete: function(){
                      top.disabled = bottom.disabled = right.disabled = left.disabled = false;
                  }
              });
          }
      };
    
      top.onchange = left.onchange = bottom.onchange = right.onchange = changeHandler;
      //end
  }

  $.getJSON('/api/org_chart.json', function(data) {
    json = data;
    
    init();
  });
</script>
