var search_data = {"index":{"searchIndex":["activedirectorywrapper","admin","apikeyuserscontroller","apiwhitelistedipuserscontroller","basecontroller","opscontroller","queuedjobscontroller","affiliation","affiliationassignment","affiliationscontroller","api","v1","applicationscontroller","entitiescontroller","peoplecontroller","rolescontroller","apiconstraints","apikeyuser","apiwhitelistedipuser","application","applicationcontroller","applicationhelper","applicationoperatorship","applicationownership","applicationscontroller","authentication","classification","classificationscontroller","delayedrake","entitiescontroller","entity","group","groupmembership","groupoperatorship","groupownership","grouprule","grouprulescontroller","groupscontroller","groupshelper","ldaphelper","ldappersonhelper","major","majorscontroller","object","ouscontroller","peoplecontroller","person","personfavoriteassignment","role","roleassignment","rolescontroller","safefilename","sitecontroller","student","studentlevel","title","titlescontroller","ucdlookups","whenevermailer","_has_role?()","access_denied()","accessible_applications()","actual_user()","ad_path_check()","add_class_attr_to_group_json()","add_user_to_group()","adsync_report()","as_json()","as_json()","as_json()","as_json()","as_json()","as_json()","attributes_protected_by_default()","authenticate()","byline()","classifications()","connect()","create()","create()","create()","create()","create()","create()","create_or_update_person_from_ldap()","csv_header()","csv_header()","current_user()","destroy()","destroy()","destroy()","destroy()","destroy()","destroy()","destroy_calculated_membership_flag=()","destroying_calculated_application_operatorship()","destroying_calculated_application_ownership()","destroying_calculated_group_membership()","destroying_calculated_role_assignment()","disconnect()","ensure_secret_exists()","fetch_group()","fetch_group_by_guid()","fetch_user()","flattened_members()","generate_secret()","group_exists?()","impersonate()","impersonating?()","import()","in_group()","index()","index()","index()","index()","index()","index()","index()","index()","index()","index()","index()","index()","index()","index()","index()","ldap_report()","list_group_members()","load_application()","load_applications()","log_identifier()","log_identifier()","log_identifier()","logout()","matches()","matches?()","members()","new()","new()","new_application_from_params()","new_entity_from_params()","new_group_from_params()","ou?()","perform()","permission_denied()","permission_denied()","print_formatted()","recalculate_all()","recalculate_group_rule_membership()","recalculate_members()","remove_user_from_group()","resolve()","role_symbols()","role_symbols()","role_symbols()","search()","search()","show()","show()","show()","show()","show()","show()","show()","show()","show()","show()","status()","sync()","sync_ad()","test_email()","title_tokens=()","to_csv()","to_csv()","trigger_sync()","trigger_sync()","trigger_sync()","trigger_sync()","unimpersonate()","unix_filename()","update()","update()","update()","update()","update()","update()","valid_columns()","welcome()","readme_for_app"],"longSearchIndex":["activedirectorywrapper","admin","admin::apikeyuserscontroller","admin::apiwhitelistedipuserscontroller","admin::basecontroller","admin::opscontroller","admin::queuedjobscontroller","affiliation","affiliationassignment","affiliationscontroller","api","api::v1","api::v1::applicationscontroller","api::v1::entitiescontroller","api::v1::peoplecontroller","api::v1::rolescontroller","apiconstraints","apikeyuser","apiwhitelistedipuser","application","applicationcontroller","applicationhelper","applicationoperatorship","applicationownership","applicationscontroller","authentication","classification","classificationscontroller","delayedrake","entitiescontroller","entity","group","groupmembership","groupoperatorship","groupownership","grouprule","grouprulescontroller","groupscontroller","groupshelper","ldaphelper","ldappersonhelper","major","majorscontroller","object","ouscontroller","peoplecontroller","person","personfavoriteassignment","role","roleassignment","rolescontroller","safefilename","sitecontroller","student","studentlevel","title","titlescontroller","ucdlookups","whenevermailer","applicationhelper#_has_role?()","sitecontroller#access_denied()","person#accessible_applications()","authentication#actual_user()","admin::opscontroller#ad_path_check()","groupshelper#add_class_attr_to_group_json()","activedirectorywrapper::add_user_to_group()","whenevermailer#adsync_report()","application#as_json()","group#as_json()","major#as_json()","person#as_json()","role#as_json()","title#as_json()","entity::attributes_protected_by_default()","authentication#authenticate()","person#byline()","person#classifications()","ldaphelper#connect()","admin::apikeyuserscontroller#create()","admin::apiwhitelistedipuserscontroller#create()","applicationscontroller#create()","entitiescontroller#create()","grouprulescontroller#create()","groupscontroller#create()","ldappersonhelper::create_or_update_person_from_ldap()","application::csv_header()","person::csv_header()","authentication#current_user()","admin::apikeyuserscontroller#destroy()","admin::apiwhitelistedipuserscontroller#destroy()","applicationscontroller#destroy()","entitiescontroller#destroy()","grouprulescontroller#destroy()","groupscontroller#destroy()","groupmembership::destroy_calculated_membership_flag=()","object#destroying_calculated_application_operatorship()","object#destroying_calculated_application_ownership()","groupmembership::destroying_calculated_group_membership()","object#destroying_calculated_role_assignment()","ldaphelper#disconnect()","apikeyuser#ensure_secret_exists()","activedirectorywrapper::fetch_group()","activedirectorywrapper::fetch_group_by_guid()","activedirectorywrapper::fetch_user()","group#flattened_members()","apikeyuser#generate_secret()","activedirectorywrapper::group_exists?()","admin::opscontroller#impersonate()","authentication#impersonating?()","peoplecontroller#import()","activedirectorywrapper::in_group()","admin::apikeyuserscontroller#index()","admin::apiwhitelistedipuserscontroller#index()","admin::queuedjobscontroller#index()","affiliationscontroller#index()","api::v1::applicationscontroller#index()","api::v1::entitiescontroller#index()","applicationscontroller#index()","classificationscontroller#index()","entitiescontroller#index()","groupscontroller#index()","majorscontroller#index()","ouscontroller#index()","peoplecontroller#index()","rolescontroller#index()","titlescontroller#index()","whenevermailer#ldap_report()","activedirectorywrapper::list_group_members()","applicationscontroller#load_application()","applicationscontroller#load_applications()","apikeyuser#log_identifier()","apiwhitelistedipuser#log_identifier()","person#log_identifier()","sitecontroller#logout()","grouprule#matches()","apiconstraints#matches?()","role#members()","apiconstraints::new()","applicationscontroller#new()","applicationscontroller#new_application_from_params()","entitiescontroller#new_entity_from_params()","groupscontroller#new_group_from_params()","group#ou?()","delayedrake#perform()","admin::basecontroller#permission_denied()","applicationcontroller#permission_denied()","grouprule#print_formatted()","grouprule::recalculate_all()","person#recalculate_group_rule_membership()","group#recalculate_members()","activedirectorywrapper::remove_user_from_group()","grouprule#resolve()","apikeyuser#role_symbols()","apiwhitelistedipuser#role_symbols()","person#role_symbols()","ldaphelper#search()","peoplecontroller#search()","api::v1::applicationscontroller#show()","api::v1::entitiescontroller#show()","api::v1::peoplecontroller#show()","api::v1::rolescontroller#show()","applicationscontroller#show()","entitiescontroller#show()","grouprulescontroller#show()","groupscontroller#show()","peoplecontroller#show()","rolescontroller#show()","sitecontroller#status()","rolescontroller#sync()","role#sync_ad()","whenevermailer#test_email()","classification#title_tokens=()","person#to_csv()","role#to_csv()","application#trigger_sync()","group#trigger_sync()","person#trigger_sync()","role#trigger_sync()","admin::opscontroller#unimpersonate()","safefilename#unix_filename()","applicationscontroller#update()","entitiescontroller#update()","grouprulescontroller#update()","groupscontroller#update()","peoplecontroller#update()","rolescontroller#update()","grouprule::valid_columns()","sitecontroller#welcome()",""],"info":[["ActiveDirectoryWrapper","","ActiveDirectoryWrapper.html","",""],["Admin","","Admin.html","",""],["Admin::ApiKeyUsersController","","Admin/ApiKeyUsersController.html","",""],["Admin::ApiWhitelistedIpUsersController","","Admin/ApiWhitelistedIpUsersController.html","",""],["Admin::BaseController","","Admin/BaseController.html","",""],["Admin::OpsController","","Admin/OpsController.html","","<p>Misc. admin operations controller\n"],["Admin::QueuedJobsController","","Admin/QueuedJobsController.html","",""],["Affiliation","","Affiliation.html","",""],["AffiliationAssignment","","AffiliationAssignment.html","",""],["AffiliationsController","","AffiliationsController.html","",""],["Api","","Api.html","",""],["Api::V1","","Api/V1.html","",""],["Api::V1::ApplicationsController","","Api/V1/ApplicationsController.html","",""],["Api::V1::EntitiesController","","Api/V1/EntitiesController.html","",""],["Api::V1::PeopleController","","Api/V1/PeopleController.html","",""],["Api::V1::RolesController","","Api/V1/RolesController.html","",""],["ApiConstraints","","ApiConstraints.html","",""],["ApiKeyUser","","ApiKeyUser.html","",""],["ApiWhitelistedIpUser","","ApiWhitelistedIpUser.html","",""],["Application","","Application.html","",""],["ApplicationController","","ApplicationController.html","",""],["ApplicationHelper","","ApplicationHelper.html","",""],["ApplicationOperatorship","","ApplicationOperatorship.html","",""],["ApplicationOwnership","","ApplicationOwnership.html","",""],["ApplicationsController","","ApplicationsController.html","",""],["Authentication","","Authentication.html","",""],["Classification","","Classification.html","",""],["ClassificationsController","","ClassificationsController.html","",""],["DelayedRake","","DelayedRake.html","","<p>From github.com/collectiveidea/delayed_job/wiki/Rake-Task-as-a-Delayed-Job\n"],["EntitiesController","","EntitiesController.html","",""],["Entity","","Entity.html","",""],["Group","","Group.html","","<p>Group shares many attributes with entity.\n"],["GroupMembership","","GroupMembership.html","","<p>GroupMembership may be calculated, in which case they need to be destroyed\nonly by the proper method, …\n"],["GroupOperatorship","","GroupOperatorship.html","",""],["GroupOwnership","","GroupOwnership.html","",""],["GroupRule","","GroupRule.html","",""],["GroupRulesController","","GroupRulesController.html","","<p>This controller is necessary for single resource-type access, needed for\nthe JSON API in order to allow …\n"],["GroupsController","","GroupsController.html","",""],["GroupsHelper","","GroupsHelper.html","",""],["LdapHelper","","LdapHelper.html","",""],["LdapPersonHelper","","LdapPersonHelper.html","",""],["Major","","Major.html","",""],["MajorsController","","MajorsController.html","",""],["Object","","Object.html","",""],["OusController","","OusController.html","",""],["PeopleController","","PeopleController.html","",""],["Person","","Person.html","","<p>Person shares many attributes with entity. Note that the &#39;name&#39;\nfield is simply self.first + …\n"],["PersonFavoriteAssignment","","PersonFavoriteAssignment.html","",""],["Role","","Role.html","","<p>A role has both &#39;entities&#39; and &#39;members&#39;. Ultimately,\n&#39;entities&#39; is the only …\n"],["RoleAssignment","","RoleAssignment.html","","<p>RoleAssignment may be calculated, in which case they need to be destroyed\nonly by the proper method, …\n"],["RolesController","","RolesController.html","",""],["SafeFilename","","SafeFilename.html","","<p>Controller-level helper to generate safe Unix filenames\n"],["SiteController","","SiteController.html","",""],["Student","","Student.html","",""],["StudentLevel","","StudentLevel.html","",""],["Title","","Title.html","",""],["TitlesController","","TitlesController.html","",""],["UcdLookups","","UcdLookups.html","",""],["WheneverMailer","","WheneverMailer.html","",""],["_has_role?","ApplicationHelper","ApplicationHelper.html#method-i-_has_role-3F","(role)",""],["access_denied","SiteController","SiteController.html#method-i-access_denied","()",""],["accessible_applications","Person","Person.html#method-i-accessible_applications","()","<p>Returns all applications visible to a user (via ownership or operatorship)\n"],["actual_user","Authentication","Authentication.html#method-i-actual_user","()","<p>Returns the &#39;actual&#39; user - usually this matches current_user but\nwhen impersonating, it will …\n"],["ad_path_check","Admin::OpsController","Admin/OpsController.html#method-i-ad_path_check","()",""],["add_class_attr_to_group_json","GroupsHelper","GroupsHelper.html#method-i-add_class_attr_to_group_json","(json)","<p>Adds a “class” attribute to the JSON array used for CSS classes with\njquery-tokeninput\n"],["add_user_to_group","ActiveDirectoryWrapper","ActiveDirectoryWrapper.html#method-c-add_user_to_group","(user, group)","<p>Takes user as an ActiveDirectory::User object and group as a\nActiveDirectory::Group object and returns …\n"],["adsync_report","WheneverMailer","WheneverMailer.html#method-i-adsync_report","(email, log)",""],["as_json","Application","Application.html#method-i-as_json","(options={})","<p>Note the nested &#39;role&#39; JSON includes “members” and “entities.”\n&#39;members&#39; …\n"],["as_json","Group","Group.html#method-i-as_json","(options={})",""],["as_json","Major","Major.html#method-i-as_json","(options={})","<p>Needed by custom controller#majors, used in details modal\n"],["as_json","Person","Person.html#method-i-as_json","(options={})",""],["as_json","Role","Role.html#method-i-as_json","(options={})",""],["as_json","Title","Title.html#method-i-as_json","(options={})",""],["attributes_protected_by_default","Entity","Entity.html#method-c-attributes_protected_by_default","()","<p>We need to be able to assign :type when creating an entity using the Entity\nsuper-class\n"],["authenticate","Authentication","Authentication.html#method-i-authenticate","()","<p>Ensure session exists. This is populated by a whitelisted IP request, a CAS\nredirect or a HTTP Auth request …\n"],["byline","Person","Person.html#method-i-byline","()","<p>Calculates &#39;byline&#39; for a Person, e.g. “PROGRAMMER V\n(staff:career)”\n"],["classifications","Person","Person.html#method-i-classifications","()","<p>Compute their classifications based on their title\n"],["connect","LdapHelper","LdapHelper.html#method-i-connect","()","<p>Connects to the LDAP server. Settings are stored in\nRails.root/config/ldap.yml (LDAP_SETTINGS)\n"],["create","Admin::ApiKeyUsersController","Admin/ApiKeyUsersController.html#method-i-create","()",""],["create","Admin::ApiWhitelistedIpUsersController","Admin/ApiWhitelistedIpUsersController.html#method-i-create","()","<p>POST /admin/api_whitelisted_ips.json\n"],["create","ApplicationsController","ApplicationsController.html#method-i-create","()",""],["create","EntitiesController","EntitiesController.html#method-i-create","()",""],["create","GroupRulesController","GroupRulesController.html#method-i-create","()",""],["create","GroupsController","GroupsController.html#method-i-create","()",""],["create_or_update_person_from_ldap","LdapPersonHelper","LdapPersonHelper.html#method-c-create_or_update_person_from_ldap","(entry, log = nil)","<p>Processes ldap_record and returns an un-saved person object, whether loaded\nfrom the database or new. …\n"],["csv_header","Application","Application.html#method-c-csv_header","()",""],["csv_header","Person","Person.html#method-c-csv_header","()","<p>For CSV export\n"],["current_user","Authentication","Authentication.html#method-i-current_user","()","<p>Returns the current_user, which may be &#39;false&#39; if impersonation is\nactive\n"],["destroy","Admin::ApiKeyUsersController","Admin/ApiKeyUsersController.html#method-i-destroy","()",""],["destroy","Admin::ApiWhitelistedIpUsersController","Admin/ApiWhitelistedIpUsersController.html#method-i-destroy","()","<p>DELETE /admin/api_whitelisted_ips/1.json\n"],["destroy","ApplicationsController","ApplicationsController.html#method-i-destroy","()",""],["destroy","EntitiesController","EntitiesController.html#method-i-destroy","()",""],["destroy","GroupRulesController","GroupRulesController.html#method-i-destroy","()",""],["destroy","GroupsController","GroupsController.html#method-i-destroy","()",""],["destroy_calculated_membership_flag=","GroupMembership","GroupMembership.html#method-c-destroy_calculated_membership_flag-3D","(val)",""],["destroying_calculated_application_operatorship","Object","Object.html#method-i-destroying_calculated_application_operatorship","()",""],["destroying_calculated_application_ownership","Object","Object.html#method-i-destroying_calculated_application_ownership","()",""],["destroying_calculated_group_membership","GroupMembership","GroupMembership.html#method-c-destroying_calculated_group_membership","()",""],["destroying_calculated_role_assignment","Object","Object.html#method-i-destroying_calculated_role_assignment","()",""],["disconnect","LdapHelper","LdapHelper.html#method-i-disconnect","()",""],["ensure_secret_exists","ApiKeyUser","ApiKeyUser.html#method-i-ensure_secret_exists","()",""],["fetch_group","ActiveDirectoryWrapper","ActiveDirectoryWrapper.html#method-c-fetch_group","(group_name)","<p>Takes name as a string (e.g. &#39;this-that&#39;) and returns an\nActiveDirectory::Group object\n"],["fetch_group_by_guid","ActiveDirectoryWrapper","ActiveDirectoryWrapper.html#method-c-fetch_group_by_guid","(guid)","<p>Takes objectGuid as a hex string and returns an ActiveDirectory::Group\nobject\n"],["fetch_user","ActiveDirectoryWrapper","ActiveDirectoryWrapper.html#method-c-fetch_user","(loginid)","<p>Takes loginid as a string (e.g. &#39;jsmith&#39;) and returns an\nActiveDirectory::User object\n"],["flattened_members","Group","Group.html#method-i-flattened_members","()","<p>Returns all members, both explicitly assigned and calculated via rules.\nRecurses groups all the way down …\n"],["generate_secret","ApiKeyUser","ApiKeyUser.html#method-i-generate_secret","()",""],["group_exists?","ActiveDirectoryWrapper","ActiveDirectoryWrapper.html#method-c-group_exists-3F","(group_name)","<p>Takes name as a string (e.g. &#39;this-that&#39;) and returns true or false\n"],["impersonate","Admin::OpsController","Admin/OpsController.html#method-i-impersonate","()","<p>GET /admin/ops/impersonate/[loginid]\n"],["impersonating?","Authentication","Authentication.html#method-i-impersonating-3F","()","<p>Returns true if we&#39;re currently impersonating another user\n"],["import","PeopleController","PeopleController.html#method-i-import","()","<p>Imports a specific person from an external database. Use the above\n&#39;search&#39; first to find possible …\n"],["in_group","ActiveDirectoryWrapper","ActiveDirectoryWrapper.html#method-c-in_group","(user, group)","<p>Returns true if &#39;user&#39; is in &#39;group&#39; (both objects should\nbe queried using fetch_user …\n"],["index","Admin::ApiKeyUsersController","Admin/ApiKeyUsersController.html#method-i-index","()",""],["index","Admin::ApiWhitelistedIpUsersController","Admin/ApiWhitelistedIpUsersController.html#method-i-index","()",""],["index","Admin::QueuedJobsController","Admin/QueuedJobsController.html#method-i-index","()",""],["index","AffiliationsController","AffiliationsController.html#method-i-index","()",""],["index","Api::V1::ApplicationsController","Api/V1/ApplicationsController.html#method-i-index","()","<p>GET /applications\n"],["index","Api::V1::EntitiesController","Api/V1/EntitiesController.html#method-i-index","()",""],["index","ApplicationsController","ApplicationsController.html#method-i-index","()",""],["index","ClassificationsController","ClassificationsController.html#method-i-index","()",""],["index","EntitiesController","EntitiesController.html#method-i-index","()",""],["index","GroupsController","GroupsController.html#method-i-index","()","<p>Used by the API and various Group-only token inputs Takes optional\n&#39;q&#39; parameter to filter index …\n"],["index","MajorsController","MajorsController.html#method-i-index","()",""],["index","OusController","OusController.html#method-i-index","()",""],["index","PeopleController","PeopleController.html#method-i-index","()","<p>Used by the API and various Person-only token inputs Takes optional\n&#39;q&#39; parameter to filter index …\n"],["index","RolesController","RolesController.html#method-i-index","()","<p>Optionally takes application_id parameter to filter index to only roles\nfrom that application\n"],["index","TitlesController","TitlesController.html#method-i-index","()",""],["ldap_report","WheneverMailer","WheneverMailer.html#method-i-ldap_report","(email, log)",""],["list_group_members","ActiveDirectoryWrapper","ActiveDirectoryWrapper.html#method-c-list_group_members","(group)","<p>Takes group as an ActiveDirectory::Group object and returns an array of\nusers\n"],["load_application","ApplicationsController","ApplicationsController.html#method-i-load_application","()",""],["load_applications","ApplicationsController","ApplicationsController.html#method-i-load_applications","()",""],["log_identifier","ApiKeyUser","ApiKeyUser.html#method-i-log_identifier","()",""],["log_identifier","ApiWhitelistedIpUser","ApiWhitelistedIpUser.html#method-i-log_identifier","()",""],["log_identifier","Person","Person.html#method-i-log_identifier","()","<p>Returns identifying string for logging purposes. Other classes implement\nthis method too.\n"],["logout","SiteController","SiteController.html#method-i-logout","()",""],["matches","GroupRule","GroupRule.html#method-i-matches","(person)","<p>Returns true if the given person satisfies the rule\n"],["matches?","ApiConstraints","ApiConstraints.html#method-i-matches-3F","(req)",""],["members","Role","Role.html#method-i-members","()","<p>Slightly different than &#39;entities&#39; … members takes all people and\nall people from groups (flattens …\n"],["new","ApiConstraints","ApiConstraints.html#method-c-new","(options)",""],["new","ApplicationsController","ApplicationsController.html#method-i-new","()",""],["new_application_from_params","ApplicationsController","ApplicationsController.html#method-i-new_application_from_params","()",""],["new_entity_from_params","EntitiesController","EntitiesController.html#method-i-new_entity_from_params","()",""],["new_group_from_params","GroupsController","GroupsController.html#method-i-new_group_from_params","()",""],["ou?","Group","Group.html#method-i-ou-3F","()",""],["perform","DelayedRake","DelayedRake.html#method-i-perform","()",""],["permission_denied","Admin::BaseController","Admin/BaseController.html#method-i-permission_denied","()",""],["permission_denied","ApplicationController","ApplicationController.html#method-i-permission_denied","()",""],["print_formatted","GroupRule","GroupRule.html#method-i-print_formatted","()",""],["recalculate_all","GroupRule","GroupRule.html#method-c-recalculate_all","(column, person_id)",""],["recalculate_group_rule_membership","Person","Person.html#method-i-recalculate_group_rule_membership","()",""],["recalculate_members","Group","Group.html#method-i-recalculate_members","()","<p>Calculates (and resets) all group_members based on rules. Will delete any\n*_member_assignment flagged …\n"],["remove_user_from_group","ActiveDirectoryWrapper","ActiveDirectoryWrapper.html#method-c-remove_user_from_group","(user, group)",""],["resolve","GroupRule","GroupRule.html#method-i-resolve","()","<p>Resolve (discern) the rule and return a UID and name for the person\n"],["role_symbols","ApiKeyUser","ApiKeyUser.html#method-i-role_symbols","()",""],["role_symbols","ApiWhitelistedIpUser","ApiWhitelistedIpUser.html#method-i-role_symbols","()","<p>Whitelisted API users are automatically given regular access\n"],["role_symbols","Person","Person.html#method-i-role_symbols","()","<p>Returns a list of symbols as required by the authorization layer\n(declarative_authorization gem). Currently …\n"],["search","LdapHelper","LdapHelper.html#method-i-search","(term)","<p>Requires a block be passed:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">search</span>(<span class=\"ruby-string\">&quot;ldap_query&quot;</span>).<span class=\"ruby-identifier\">do</span> <span class=\"ruby-operator\">|</span><span class=\"ruby-identifier\">p</span><span class=\"ruby-operator\">|</span> <span class=\"ruby-operator\">...</span> <span class=\"ruby-keyword\">end</span>\n</pre>\n"],["search","PeopleController","PeopleController.html#method-i-search","()","<p>&#39;search&#39; queries <em>external</em> databases (LDAP, etc.). GET\n/search?q=loginid (can be partial loginid, …\n"],["show","Api::V1::ApplicationsController","Api/V1/ApplicationsController.html#method-i-show","()","<p>GET /applications/1\n"],["show","Api::V1::EntitiesController","Api/V1/EntitiesController.html#method-i-show","()",""],["show","Api::V1::PeopleController","Api/V1/PeopleController.html#method-i-show","()",""],["show","Api::V1::RolesController","Api/V1/RolesController.html#method-i-show","()",""],["show","ApplicationsController","ApplicationsController.html#method-i-show","()",""],["show","EntitiesController","EntitiesController.html#method-i-show","()",""],["show","GroupRulesController","GroupRulesController.html#method-i-show","()",""],["show","GroupsController","GroupsController.html#method-i-show","()",""],["show","PeopleController","PeopleController.html#method-i-show","()",""],["show","RolesController","RolesController.html#method-i-show","()",""],["status","SiteController","SiteController.html#method-i-status","()","<p>Check for HTTP 200 at /status.json for application issues Use this for\nfuture checks\n"],["sync","RolesController","RolesController.html#method-i-sync","()","<p>Forces a role to sync (used by a button in application modal)\n"],["sync_ad","Role","Role.html#method-i-sync_ad","()","<p>Syncronizes with AD Note: Due to AD&#39;s architecture, this cannot be\nverified as a success right away …\n"],["test_email","WheneverMailer","WheneverMailer.html#method-i-test_email","(user)",""],["title_tokens=","Classification","Classification.html#method-i-title_tokens-3D","(ids)",""],["to_csv","Person","Person.html#method-i-to_csv","()",""],["to_csv","Role","Role.html#method-i-to_csv","()",""],["trigger_sync","Application","Application.html#method-i-trigger_sync","()",""],["trigger_sync","Group","Group.html#method-i-trigger_sync","()",""],["trigger_sync","Person","Person.html#method-i-trigger_sync","()",""],["trigger_sync","Role","Role.html#method-i-trigger_sync","()","<p>trigger_sync exists in Person and Group as well It&#39;s purpose is to\nmerely handle whatever needs to …\n"],["unimpersonate","Admin::OpsController","Admin/OpsController.html#method-i-unimpersonate","()",""],["unix_filename","SafeFilename","SafeFilename.html#method-i-unix_filename","(filename)","<p>Taken from\nstackoverflow.com/questions/3932704/where-should-i-put-controller-helper-methods\n"],["update","ApplicationsController","ApplicationsController.html#method-i-update","()",""],["update","EntitiesController","EntitiesController.html#method-i-update","()",""],["update","GroupRulesController","GroupRulesController.html#method-i-update","()",""],["update","GroupsController","GroupsController.html#method-i-update","()",""],["update","PeopleController","PeopleController.html#method-i-update","()",""],["update","RolesController","RolesController.html#method-i-update","()",""],["valid_columns","GroupRule","GroupRule.html#method-c-valid_columns","()","<p>Needed by &#39;Group&#39; when calculating rules\n"],["welcome","SiteController","SiteController.html#method-i-welcome","()",""],["README_FOR_APP","","doc/README_FOR_APP.html","",""]]}}