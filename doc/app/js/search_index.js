var search_data = {"index":{"searchIndex":["activedirectorywrapper","admin","apikeyscontroller","apiwhitelistedipscontroller","basecontroller","opscontroller","affiliation","affiliationassignment","affiliationscontroller","apikeyuser","apiwhitelistedipuser","application","applicationcontroller","applicationhelper","applicationoperatorassignment","applicationownerassignment","applicationscontroller","authentication","classification","classificationscontroller","databaseextensions","delayedrake","entitiescontroller","entity","group","groupoperatorassignment","groupownerassignment","grouprule","groupscontroller","groupshelper","ldaphelper","ldappersonhelper","major","majorscontroller","ouscontroller","peoplecontroller","person","personfavoriteassignment","role","roleassignment","roleassignmentscontroller","rolescontroller","safefilename","sitecontroller","student","studentlevel","title","titlescontroller","ucdlookups","whenevermailer","_has_role?()","about()","access_denied()","accessible_applications()","actual_user()","ad_path_check()","adapter_type()","add_class_attr_to_group_json()","add_user_to_group()","adsync_report()","all_roles()","application_name()","applications()","as_json()","as_json()","as_json()","as_json()","as_json()","as_json()","attributes_protected_by_default()","byline()","can_administer_application?()","can_administer_group?()","can_administer_person?()","can_administer_role?()","classifications()","clear_cache_if_needed()","clear_cache_if_needed()","connect()","contact()","create()","create()","create()","create()","create()","create_or_update_person_from_ldap()","csv_header()","csv_header()","current_user()","db_concat()","destroy()","destroy()","destroy()","destroy()","disconnect()","ensure_secret_exists()","entities_tokens=()","faq()","fetch_group()","fetch_user()","first_or_last_presence()","generate_secret()","group_exists?()","impersonate()","impersonating?()","import()","in_group()","index()","index()","index()","index()","index()","index()","index()","index()","index()","index()","index()","index()","init()","is_rm_admin?()","ldap_report()","li_link_with_class()","list_group_members()","load_application()","log_identifier()","log_identifier()","log_identifier()","logout()","manageable_applications()","matches()","member_ids=()","member_tokens()","members()","members()","must_be_owner_or_operator_of_application()","name()","new()","operator_tokens()","operator_tokens=()","ou_ids=()","owner_tokens()","owner_tokens=()","perform()","permission_denied()","permission_denied()","print_formatted()","remove_user_from_group()","request_access()","require_authentication()","resolve()","role_symbols()","role_symbols()","role_symbols()","roles_attributes=()","roles_by_api_key()","roles_by_application()","rule_members()","rules_attributes=()","search()","search()","show()","show()","show()","show()","show()","sync_ad()","test_email()","title_tokens=()","to_csv()","to_csv()","trigger_sync()","trigger_sync()","trigger_sync()","unimpersonate()","unix_filename()","update()","update()","update()","valid_columns()","welcome()","readme_for_app"],"longSearchIndex":["activedirectorywrapper","admin","admin::apikeyscontroller","admin::apiwhitelistedipscontroller","admin::basecontroller","admin::opscontroller","affiliation","affiliationassignment","affiliationscontroller","apikeyuser","apiwhitelistedipuser","application","applicationcontroller","applicationhelper","applicationoperatorassignment","applicationownerassignment","applicationscontroller","authentication","classification","classificationscontroller","databaseextensions","delayedrake","entitiescontroller","entity","group","groupoperatorassignment","groupownerassignment","grouprule","groupscontroller","groupshelper","ldaphelper","ldappersonhelper","major","majorscontroller","ouscontroller","peoplecontroller","person","personfavoriteassignment","role","roleassignment","roleassignmentscontroller","rolescontroller","safefilename","sitecontroller","student","studentlevel","title","titlescontroller","ucdlookups","whenevermailer","applicationhelper#_has_role?()","sitecontroller#about()","sitecontroller#access_denied()","person#accessible_applications()","authentication#actual_user()","admin::opscontroller#ad_path_check()","databaseextensions#adapter_type()","groupshelper#add_class_attr_to_group_json()","activedirectorywrapper::add_user_to_group()","whenevermailer#adsync_report()","person#all_roles()","role#application_name()","group#applications()","application#as_json()","group#as_json()","major#as_json()","person#as_json()","role#as_json()","title#as_json()","entity::attributes_protected_by_default()","person#byline()","person#can_administer_application?()","person#can_administer_group?()","person#can_administer_person?()","person#can_administer_role?()","person#classifications()","group#clear_cache_if_needed()","grouprule#clear_cache_if_needed()","ldaphelper#connect()","sitecontroller#contact()","admin::apikeyscontroller#create()","admin::apiwhitelistedipscontroller#create()","applicationscontroller#create()","entitiescontroller#create()","groupscontroller#create()","ldappersonhelper::create_or_update_person_from_ldap()","application::csv_header()","person::csv_header()","authentication#current_user()","databaseextensions#db_concat()","admin::apikeyscontroller#destroy()","admin::apiwhitelistedipscontroller#destroy()","applicationscontroller#destroy()","entitiescontroller#destroy()","ldaphelper#disconnect()","apikeyuser#ensure_secret_exists()","group#entities_tokens=()","sitecontroller#faq()","activedirectorywrapper::fetch_group()","activedirectorywrapper::fetch_user()","person#first_or_last_presence()","apikeyuser#generate_secret()","activedirectorywrapper::group_exists?()","admin::opscontroller#impersonate()","authentication#impersonating?()","peoplecontroller#import()","activedirectorywrapper::in_group()","admin::apikeyscontroller#index()","admin::apiwhitelistedipscontroller#index()","affiliationscontroller#index()","applicationscontroller#index()","classificationscontroller#index()","entitiescontroller#index()","groupscontroller#index()","majorscontroller#index()","ouscontroller#index()","peoplecontroller#index()","rolescontroller#index()","titlescontroller#index()","role#init()","person#is_rm_admin?()","whenevermailer#ldap_report()","applicationhelper#li_link_with_class()","activedirectorywrapper::list_group_members()","applicationscontroller#load_application()","apikeyuser#log_identifier()","apiwhitelistedipuser#log_identifier()","person#log_identifier()","sitecontroller#logout()","person#manageable_applications()","grouprule#matches()","group#member_ids=()","group#member_tokens()","group#members()","role#members()","roleassignment#must_be_owner_or_operator_of_application()","person#name()","applicationscontroller#new()","group#operator_tokens()","group#operator_tokens=()","person#ou_ids=()","group#owner_tokens()","group#owner_tokens=()","delayedrake#perform()","admin::basecontroller#permission_denied()","applicationcontroller#permission_denied()","grouprule#print_formatted()","activedirectorywrapper::remove_user_from_group()","sitecontroller#request_access()","authentication#require_authentication()","grouprule#resolve()","apikeyuser#role_symbols()","apiwhitelistedipuser#role_symbols()","person#role_symbols()","application#roles_attributes=()","person#roles_by_api_key()","person#roles_by_application()","group#rule_members()","group#rules_attributes=()","ldaphelper#search()","peoplecontroller#search()","applicationscontroller#show()","entitiescontroller#show()","groupscontroller#show()","peoplecontroller#show()","rolescontroller#show()","role#sync_ad()","whenevermailer#test_email()","classification#title_tokens=()","person#to_csv()","role#to_csv()","group#trigger_sync()","person#trigger_sync()","role#trigger_sync()","admin::opscontroller#unimpersonate()","safefilename#unix_filename()","applicationscontroller#update()","entitiescontroller#update()","peoplecontroller#update()","grouprule::valid_columns()","sitecontroller#welcome()",""],"info":[["ActiveDirectoryWrapper","","ActiveDirectoryWrapper.html","",""],["Admin","","Admin.html","",""],["Admin::ApiKeysController","","Admin/ApiKeysController.html","",""],["Admin::ApiWhitelistedIpsController","","Admin/ApiWhitelistedIpsController.html","",""],["Admin::BaseController","","Admin/BaseController.html","",""],["Admin::OpsController","","Admin/OpsController.html","","<p>Misc. admin operations controller\n"],["Affiliation","","Affiliation.html","",""],["AffiliationAssignment","","AffiliationAssignment.html","",""],["AffiliationsController","","AffiliationsController.html","",""],["ApiKeyUser","","ApiKeyUser.html","",""],["ApiWhitelistedIpUser","","ApiWhitelistedIpUser.html","",""],["Application","","Application.html","",""],["ApplicationController","","ApplicationController.html","",""],["ApplicationHelper","","ApplicationHelper.html","",""],["ApplicationOperatorAssignment","","ApplicationOperatorAssignment.html","",""],["ApplicationOwnerAssignment","","ApplicationOwnerAssignment.html","",""],["ApplicationsController","","ApplicationsController.html","",""],["Authentication","","Authentication.html","",""],["Classification","","Classification.html","",""],["ClassificationsController","","ClassificationsController.html","",""],["DatabaseExtensions","","DatabaseExtensions.html","","<p>Database &#39;helper&#39; methods used in controllers. Not easily\nreplicated with ActiveRecord.\n"],["DelayedRake","","DelayedRake.html","","<p>From github.com/collectiveidea/delayed_job/wiki/Rake-Task-as-a-Delayed-Job\n"],["EntitiesController","","EntitiesController.html","",""],["Entity","","Entity.html","",""],["Group","","Group.html","",""],["GroupOperatorAssignment","","GroupOperatorAssignment.html","",""],["GroupOwnerAssignment","","GroupOwnerAssignment.html","",""],["GroupRule","","GroupRule.html","",""],["GroupsController","","GroupsController.html","",""],["GroupsHelper","","GroupsHelper.html","",""],["LdapHelper","","LdapHelper.html","",""],["LdapPersonHelper","","LdapPersonHelper.html","",""],["Major","","Major.html","",""],["MajorsController","","MajorsController.html","",""],["OusController","","OusController.html","",""],["PeopleController","","PeopleController.html","",""],["Person","","Person.html","","<p>Person shares many attributes with entity. Note that the &#39;name&#39;\nfield is simply self.first + …\n"],["PersonFavoriteAssignment","","PersonFavoriteAssignment.html","",""],["Role","","Role.html","",""],["RoleAssignment","","RoleAssignment.html","",""],["RoleAssignmentsController","","RoleAssignmentsController.html","","<p>Useful with AJAX calls from the CAO interface\n"],["RolesController","","RolesController.html","",""],["SafeFilename","","SafeFilename.html","","<p>Controller-level helper to generate safe Unix filenames\n"],["SiteController","","SiteController.html","",""],["Student","","Student.html","",""],["StudentLevel","","StudentLevel.html","",""],["Title","","Title.html","",""],["TitlesController","","TitlesController.html","",""],["UcdLookups","","UcdLookups.html","",""],["WheneverMailer","","WheneverMailer.html","",""],["_has_role?","ApplicationHelper","ApplicationHelper.html#method-i-_has_role-3F","(role)",""],["about","SiteController","SiteController.html#method-i-about","()",""],["access_denied","SiteController","SiteController.html#method-i-access_denied","()",""],["accessible_applications","Person","Person.html#method-i-accessible_applications","()","<p>Compute applications for which they have a role.\n"],["actual_user","Authentication","Authentication.html#method-i-actual_user","()","<p>Returns the &#39;actual&#39; user - usually this matches current_user but\nwhen impersonating, it will …\n"],["ad_path_check","Admin::OpsController","Admin/OpsController.html#method-i-ad_path_check","()",""],["adapter_type","DatabaseExtensions","DatabaseExtensions.html#method-i-adapter_type","()",""],["add_class_attr_to_group_json","GroupsHelper","GroupsHelper.html#method-i-add_class_attr_to_group_json","(json)","<p>Adds a “class” attribute to the JSON array used for CSS classes with\njquery-tokeninput\n"],["add_user_to_group","ActiveDirectoryWrapper","ActiveDirectoryWrapper.html#method-c-add_user_to_group","(user, group)","<p>Takes user as an ActiveDirectory::User object and group as a\nActiveDirectory::Group object and returns …\n"],["adsync_report","WheneverMailer","WheneverMailer.html#method-i-adsync_report","(email, log)",""],["all_roles","Person","Person.html#method-i-all_roles","()","<p>Calculates all roles for an individual - explicitly assigned + those via\ngroup membership, including …\n"],["application_name","Role","Role.html#method-i-application_name","()","<p>Needed in show.json.rabl to display a role&#39;s application&#39;s name\n"],["applications","Group","Group.html#method-i-applications","()","<p>Compute accessible applications\n"],["as_json","Application","Application.html#method-i-as_json","(options={})",""],["as_json","Group","Group.html#method-i-as_json","(options={})",""],["as_json","Major","Major.html#method-i-as_json","(options={})","<p>Needed by custom controller#majors, used in details modal\n"],["as_json","Person","Person.html#method-i-as_json","(options={})",""],["as_json","Role","Role.html#method-i-as_json","(options={})",""],["as_json","Title","Title.html#method-i-as_json","(options={})",""],["attributes_protected_by_default","Entity","Entity.html#method-c-attributes_protected_by_default","()","<p>We need to be able to assign :type when creating using the Entity\nsuper-class\n"],["byline","Person","Person.html#method-i-byline","()",""],["can_administer_application?","Person","Person.html#method-i-can_administer_application-3F","(app_id)",""],["can_administer_group?","Person","Person.html#method-i-can_administer_group-3F","(group_id)",""],["can_administer_person?","Person","Person.html#method-i-can_administer_person-3F","(person_id)","<p>SECUREME: Does it matter that this computes based on favorites now?\n"],["can_administer_role?","Person","Person.html#method-i-can_administer_role-3F","(role_id)",""],["classifications","Person","Person.html#method-i-classifications","()","<p>Compute their classifications based on their title\n"],["clear_cache_if_needed","Group","Group.html#method-i-clear_cache_if_needed","(force_clear = false)",""],["clear_cache_if_needed","GroupRule","GroupRule.html#method-i-clear_cache_if_needed","(force_clear = false)",""],["connect","LdapHelper","LdapHelper.html#method-i-connect","()","<p>Connects to the LDAP server. Settings are stored in\nRails.root/config/ldap.yml (LDAP_SETTINGS)\n"],["contact","SiteController","SiteController.html#method-i-contact","()",""],["create","Admin::ApiKeysController","Admin/ApiKeysController.html#method-i-create","()",""],["create","Admin::ApiWhitelistedIpsController","Admin/ApiWhitelistedIpsController.html#method-i-create","()","<p>POST /admin/api_whitelisted_ips.json\n"],["create","ApplicationsController","ApplicationsController.html#method-i-create","()","<p>POST /applications\n"],["create","EntitiesController","EntitiesController.html#method-i-create","()",""],["create","GroupsController","GroupsController.html#method-i-create","()",""],["create_or_update_person_from_ldap","LdapPersonHelper","LdapPersonHelper.html#method-c-create_or_update_person_from_ldap","(entry, record_log = nil)","<p>Processes ldap_record and returns an un-saved person object, whether loaded\nfrom the database or new. …\n"],["csv_header","Application","Application.html#method-c-csv_header","()",""],["csv_header","Person","Person.html#method-c-csv_header","()",""],["current_user","Authentication","Authentication.html#method-i-current_user","()","<p>Returns the current_user, which may be &#39;false&#39; if impersonation is\nactive\n"],["db_concat","DatabaseExtensions","DatabaseExtensions.html#method-i-db_concat","(*args)","<p>db_concat is from\nstackoverflow.com/questions/2986405/database-independant-sql-string-concatenation-in-rails\n…\n"],["destroy","Admin::ApiKeysController","Admin/ApiKeysController.html#method-i-destroy","()",""],["destroy","Admin::ApiWhitelistedIpsController","Admin/ApiWhitelistedIpsController.html#method-i-destroy","()","<p>DELETE /admin/api_whitelisted_ips/1.json\n"],["destroy","ApplicationsController","ApplicationsController.html#method-i-destroy","()","<p>DELETE /applications/1\n"],["destroy","EntitiesController","EntitiesController.html#method-i-destroy","()",""],["disconnect","LdapHelper","LdapHelper.html#method-i-disconnect","()",""],["ensure_secret_exists","ApiKeyUser","ApiKeyUser.html#method-i-ensure_secret_exists","()",""],["entities_tokens=","Group","Group.html#method-i-entities_tokens-3D","(ids)",""],["faq","SiteController","SiteController.html#method-i-faq","()",""],["fetch_group","ActiveDirectoryWrapper","ActiveDirectoryWrapper.html#method-c-fetch_group","(group_name)","<p>Takes name as a string (e.g. &#39;this-that&#39;) and returns an\nActiveDirectory::Group object\n"],["fetch_user","ActiveDirectoryWrapper","ActiveDirectoryWrapper.html#method-c-fetch_user","(loginid)","<p>Takes loginid as a string (e.g. &#39;jsmith&#39;) and returns an\nActiveDirectory::User object\n"],["first_or_last_presence","Person","Person.html#method-i-first_or_last_presence","()",""],["generate_secret","ApiKeyUser","ApiKeyUser.html#method-i-generate_secret","()",""],["group_exists?","ActiveDirectoryWrapper","ActiveDirectoryWrapper.html#method-c-group_exists-3F","(group_name)","<p>Takes name as a string (e.g. &#39;this-that&#39;) and returns true or false\n"],["impersonate","Admin::OpsController","Admin/OpsController.html#method-i-impersonate","()","<p>GET /admin/ops/impersonate/[loginid]\n"],["impersonating?","Authentication","Authentication.html#method-i-impersonating-3F","()","<p>Returns true if we&#39;re currently impersonating another user\n"],["import","PeopleController","PeopleController.html#method-i-import","()","<p>Imports a specific person from an external database. Use the above\n&#39;search&#39; first to find possible …\n"],["in_group","ActiveDirectoryWrapper","ActiveDirectoryWrapper.html#method-c-in_group","(user, group)","<p>Returns true if &#39;user&#39; is in &#39;group&#39; (both objects should\nbe queried using fetch_user …\n"],["index","Admin::ApiKeysController","Admin/ApiKeysController.html#method-i-index","()",""],["index","Admin::ApiWhitelistedIpsController","Admin/ApiWhitelistedIpsController.html#method-i-index","()",""],["index","AffiliationsController","AffiliationsController.html#method-i-index","()",""],["index","ApplicationsController","ApplicationsController.html#method-i-index","()","<p>GET /applications\n"],["index","ClassificationsController","ClassificationsController.html#method-i-index","()",""],["index","EntitiesController","EntitiesController.html#method-i-index","()",""],["index","GroupsController","GroupsController.html#method-i-index","()","<p>Used by the API and various Group-only token inputs Takes optional\n&#39;q&#39; parameter to filter index …\n"],["index","MajorsController","MajorsController.html#method-i-index","()",""],["index","OusController","OusController.html#method-i-index","()",""],["index","PeopleController","PeopleController.html#method-i-index","()","<p>Used by the API and various Person-only token inputs Takes optional\n&#39;q&#39; parameter to filter index …\n"],["index","RolesController","RolesController.html#method-i-index","()","<p>Optionally takes application_id parameter to filter index to only roles\nfrom that application\n"],["index","TitlesController","TitlesController.html#method-i-index","()",""],["init","Role","Role.html#method-i-init","()",""],["is_rm_admin?","Person","Person.html#method-i-is_rm_admin-3F","()","<p>Returns true if this user is an admin of “DSS Roles Management” itself\n"],["ldap_report","WheneverMailer","WheneverMailer.html#method-i-ldap_report","(email, log)",""],["li_link_with_class","ApplicationHelper","ApplicationHelper.html#method-i-li_link_with_class","(options)","<p>Produces a link_to, adjusting CSS class if link is to current controller\n"],["list_group_members","ActiveDirectoryWrapper","ActiveDirectoryWrapper.html#method-c-list_group_members","(group)","<p>Takes group as an ActiveDirectory::Group object and returns an array of\nusers\n"],["load_application","ApplicationsController","ApplicationsController.html#method-i-load_application","()",""],["log_identifier","ApiKeyUser","ApiKeyUser.html#method-i-log_identifier","()",""],["log_identifier","ApiWhitelistedIpUser","ApiWhitelistedIpUser.html#method-i-log_identifier","()",""],["log_identifier","Person","Person.html#method-i-log_identifier","()",""],["logout","SiteController","SiteController.html#method-i-logout","()",""],["manageable_applications","Person","Person.html#method-i-manageable_applications","()","<p>Compute applications for which they can make assignments.\n"],["matches","GroupRule","GroupRule.html#method-i-matches","(person)","<p>Returns true if the given person satisfies the rule\n"],["member_ids=","Group","Group.html#method-i-member_ids-3D","(ids)",""],["member_tokens","Group","Group.html#method-i-member_tokens","()","<p>Returns tokenized members, including &#39;via&#39; parameter to\ndifferentiate explicitly-assigned vs. …\n"],["members","Group","Group.html#method-i-members","(flatten = false)","<p>Calculates all members, including those defined via rules. If flatten is\nset to true, child groups are …\n"],["members","Role","Role.html#method-i-members","()","<p>Slightly different than &#39;entities&#39; … members takes all people and\nall people from groups (flattens …\n"],["must_be_owner_or_operator_of_application","RoleAssignment","RoleAssignment.html#method-i-must_be_owner_or_operator_of_application","()","<p>Only allow roles to be assigned if the associated application is owned or\ncan be operated upon by the …\n"],["name","Person","Person.html#method-i-name","()","<p>Overriden to be self.first + “ ” + self.last though there is a\n&#39;name&#39; column used by …\n"],["new","ApplicationsController","ApplicationsController.html#method-i-new","()","<p>GET /applications/new\n"],["operator_tokens","Group","Group.html#method-i-operator_tokens","()",""],["operator_tokens=","Group","Group.html#method-i-operator_tokens-3D","(ids)",""],["ou_ids=","Person","Person.html#method-i-ou_ids-3D","(ids)",""],["owner_tokens","Group","Group.html#method-i-owner_tokens","()",""],["owner_tokens=","Group","Group.html#method-i-owner_tokens-3D","(ids)",""],["perform","DelayedRake","DelayedRake.html#method-i-perform","()",""],["permission_denied","Admin::BaseController","Admin/BaseController.html#method-i-permission_denied","()",""],["permission_denied","ApplicationController","ApplicationController.html#method-i-permission_denied","()",""],["print_formatted","GroupRule","GroupRule.html#method-i-print_formatted","()",""],["remove_user_from_group","ActiveDirectoryWrapper","ActiveDirectoryWrapper.html#method-c-remove_user_from_group","(user, group)",""],["request_access","SiteController","SiteController.html#method-i-request_access","()",""],["require_authentication","Authentication","Authentication.html#method-i-require_authentication","()","<p>Ensure session exists. This is populated by a whitelisted IP request, a CAS\nredirect or a HTTP Auth request …\n"],["resolve","GroupRule","GroupRule.html#method-i-resolve","()","<p>Resolve (discern) the rule and return a UID and name for the person\n"],["role_symbols","ApiKeyUser","ApiKeyUser.html#method-i-role_symbols","()",""],["role_symbols","ApiWhitelistedIpUser","ApiWhitelistedIpUser.html#method-i-role_symbols","()","<p>Whitelisted API users are automatically given regular access\n"],["role_symbols","Person","Person.html#method-i-role_symbols","()","<p>ACL symbols\n"],["roles_attributes=","Application","Application.html#method-i-roles_attributes-3D","(role_attrs)","<p>Overriden to avoid having to use _destroy in Backbone/simplify client-side\ninteraction\n"],["roles_by_api_key","Person","Person.html#method-i-roles_by_api_key","(api_key_id)",""],["roles_by_application","Person","Person.html#method-i-roles_by_application","(application_id)",""],["rule_members","Group","Group.html#method-i-rule_members","()","<p>Returns all members via resolving group rules This algorithm starts with an\nempty set, then runs all …\n"],["rules_attributes=","Group","Group.html#method-i-rules_attributes-3D","(rule_attrs)","<p>Overriden to avoid having to use _destroy in Backbone/simplify client-side\ninteraction\n"],["search","LdapHelper","LdapHelper.html#method-i-search","(term)","<p>Requires a block be passed:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">search</span>(<span class=\"ruby-string\">&quot;ldap_query&quot;</span>).<span class=\"ruby-identifier\">do</span> <span class=\"ruby-operator\">|</span><span class=\"ruby-identifier\">p</span><span class=\"ruby-operator\">|</span> <span class=\"ruby-operator\">...</span> <span class=\"ruby-keyword\">end</span>\n</pre>\n"],["search","PeopleController","PeopleController.html#method-i-search","()","<p>&#39;search&#39; queries <em>external</em> databases (LDAP, etc.). GET\n/search?q=loginid (can be partial loginid, …\n"],["show","ApplicationsController","ApplicationsController.html#method-i-show","()","<p>GET /applications/1\n"],["show","EntitiesController","EntitiesController.html#method-i-show","()",""],["show","GroupsController","GroupsController.html#method-i-show","()",""],["show","PeopleController","PeopleController.html#method-i-show","()",""],["show","RolesController","RolesController.html#method-i-show","()",""],["sync_ad","Role","Role.html#method-i-sync_ad","()","<p>Syncronizes with AD Note: Due to AD&#39;s architecture, this cannot be\nverified as a success right away …\n"],["test_email","WheneverMailer","WheneverMailer.html#method-i-test_email","(user)",""],["title_tokens=","Classification","Classification.html#method-i-title_tokens-3D","(ids)",""],["to_csv","Person","Person.html#method-i-to_csv","()",""],["to_csv","Role","Role.html#method-i-to_csv","()",""],["trigger_sync","Group","Group.html#method-i-trigger_sync","()",""],["trigger_sync","Person","Person.html#method-i-trigger_sync","()",""],["trigger_sync","Role","Role.html#method-i-trigger_sync","()","<p>trigger_sync exists in Person and Group as well It&#39;s purpose is to\nmerely handle whatever needs to …\n"],["unimpersonate","Admin::OpsController","Admin/OpsController.html#method-i-unimpersonate","()",""],["unix_filename","SafeFilename","SafeFilename.html#method-i-unix_filename","(filename)","<p>Taken from\nstackoverflow.com/questions/3932704/where-should-i-put-controller-helper-methods\n"],["update","ApplicationsController","ApplicationsController.html#method-i-update","()","<p>PUT /applications/1\n"],["update","EntitiesController","EntitiesController.html#method-i-update","()",""],["update","PeopleController","PeopleController.html#method-i-update","()",""],["valid_columns","GroupRule","GroupRule.html#method-c-valid_columns","()","<p>Needed by &#39;Group&#39; when calculating rules\n"],["welcome","SiteController","SiteController.html#method-i-welcome","()",""],["README_FOR_APP","","doc/README_FOR_APP.html","","<p>Use this README file to introduce your application and point to useful\nplaces in the API for learning …\n"]]}}